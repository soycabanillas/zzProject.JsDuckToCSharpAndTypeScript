@model JsDuckJsonParser.Class.ClassDefinition
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;

@{
    zzProject.ExtJSToCSharp.JsToCSharp.JsType typeConverter = new zzProject.ExtJSToCSharp.JsToCSharp.JsType("zzProject.ExtJSNet.ExtJS.Classes");
    string classNamespace = typeConverter.GetNetTypeNamespace(Model.Name);
    string className = typeConverter.GetNetTypeName(Model.Name);
    string extendsClassFullName = null;
    if (!string.IsNullOrWhiteSpace(Model.Extends))
    {
        extendsClassFullName  = typeConverter.GetNetTypeFullName(Model.Extends);
    }
}
namespace @classNamespace {
    public partial class @className @if (extendsClassFullName != null) { @(": " + extendsClassFullName) } {
        @foreach (var config in @Model.GetMembers(JsDuckJsonParser.Class.MemberTypeEnum.cfg)) {
            if (config.Owner == @Model.Name && config.Private.GetValueOrDefault(false) == false)
            {
                if (config.Default != null) {
                    <text>
        @String.Format(@"private System.String _{0}_default = ""{1}"";", config.Name, config.Default)
                    </text>
                }
                var types2 = config.GetTypes();
                var types = config.Type.Split('/');
                //if (types.Count() == 1)
                if (types2.Types.Count() == 1)
                {
                    var typeName = @types2.Types[0];
                    <text>
        [JsonIgnore]
        public @typeName @config.Name { get { return this.attributes.GetOrDefault<@typeName>("@config.Name"); } set { this.attributes["@config.Name"] = value; } }
        @*public @typeName @config.Name { get { return this.attributes.GetOrDefault<@config.Type>("@config.Name" @if (!string.IsNullOrWhiteSpace(@config.Default)) { @(", " + @config.Default) }); } set { this.attributes["@config.Name"] = value; } }                *@
                    </text>
                } 
                //else if (types.Count() > 1)
                else if (false)
                {
                    var propTypeName = "MultiType_" + config.Name;
                    <text>
        public class @propTypeName {
            public new Type GetType()
            {
                return _value.GetType();
            }

                        @foreach (var type in types)
	                    {
                            var subTypeName = typeConverter.GetNetTypeFullName(type);
                            <text>
            public static explicit operator @subTypeName (@propTypeName m)
            {
                if (m._value.GetType() == typeof(@subTypeName)) return (@subTypeName)m._value;
                else return default(@subTypeName);
            }
            public static implicit operator @propTypeName (@subTypeName m) {
                return new @propTypeName { _value = m };
            }
                            </text>
	                    }

            private object _value;
            public object @@object  { get { return _value; } set { _value = value; } }
            public int @@int { get { return (int) _value; } set { _value = value; } }
            public string @@function { get { return (string) _value; } set { _value = value; } }
        }

        [JsonIgnore]
        public @propTypeName @config.Name { get { return this.attributes.GetOrDefault<@propTypeName>("@config.Name" @if (!string.IsNullOrWhiteSpace(@config.Default)) { @(", " + @config.Default) }); } set { this.attributes["@config.Name"] = value; } }                

                    </text>
                }
            }
        }
    }
}
